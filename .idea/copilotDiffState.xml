<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# ProntoLogin - Android Authentication App&#10;&#10;##  Project Overview&#10;&#10;ProntoLogin is an Android application that implements a complete authentication flow using **Jetpack Compose** and **Firebase Authentication**. The app provides login, sign-up, and forgot password functionality with a modern Material Design 3 interface.&#10;&#10;##  Purpose&#10;&#10;This project was created as a **Pronto Task** to demonstrate modern Android development practices for implementing user authentication flows. It serves as a template for building secure, user-friendly login systems in Android applications.&#10;&#10;##  Tech Stack&#10;&#10;- **UI Framework**: Jetpack Compose&#10;- **Architecture**: MVVM with ViewModel and View State management&#10;- **Design System**: Material Design 3&#10;- **Authentication**: Firebase Authentication&#10;- **Dependency Injection**: Dagger Hilt&#10;- **Navigation**: Jetpack Navigation Compose&#10;- **Language**: Kotlin&#10;- **Min SDK**: 29 (Android 10)&#10;- **Target SDK**: 36&#10;&#10;## ️ Project Structure&#10;&#10;```&#10;com.valokafor.prontologin/&#10;├── MainActivity.kt              # Entry point - currently has placeholder content&#10;├── ui/&#10;│   ├── ProntoLoginApplication.kt # Application class&#10;│   └── theme/                   # Material3 theming&#10;│       ├── Color.kt&#10;│       ├── Theme.kt&#10;│       └── Type.kt&#10;```&#10;&#10;##  Features to Implement&#10;&#10;### Login Screen&#10;- ✅ Email and password input fields&#10;- ✅ Form validation (email format, non-empty fields)&#10;- ✅ Loading states during authentication&#10;- ✅ Error message display&#10;- ✅ Navigation to Sign Up and Forgot Password&#10;&#10;### Sign Up Screen&#10;- ✅ Email, password, and confirm password fields&#10;- ✅ Password matching validation&#10;- ✅ Account creation with Firebase Auth&#10;- ✅ Success feedback and navigation back to login&#10;&#10;### Forgot Password Screen&#10;- ✅ Email input for password reset&#10;- ✅ Firebase password reset email functionality&#10;- ✅ Confirmation messages&#10;- ✅ Navigation back to login&#10;&#10;##  Current Implementation Status&#10;&#10;### ✅ Completed&#10;- Basic project setup with all required dependencies&#10;- Firebase configuration (google-services.json present)&#10;- Material3 theming&#10;- Dagger Hilt setup for dependency injection&#10;&#10;###  In Progress&#10;- The project currently shows a &quot;Hello World&quot; placeholder in MainActivity&#10;- Authentication screens and ViewModels need to be implemented&#10;- Firebase Auth integration pending&#10;- Navigation between screens to be set up&#10;&#10;##  Technical Requirements&#10;&#10;### Validation Rules&#10;- **Email**: Must be valid email format using regex validation&#10;- **Password**: Non-empty (will follow Firebase minimum requirements)&#10;- **Confirm Password**: Must match the password field&#10;- **Form State**: Buttons disabled when form is invalid&#10;&#10;### State Management&#10;- Use sealed classes for UI states (Loading, Success, Error)&#10;- Implement State Hoisting for form inputs&#10;- ViewModel-based architecture for business logic&#10;&#10;### UI Components&#10;- `Scaffold` for screen structure&#10;- `OutlinedTextField` for input fields&#10;- `Button` and `TextButton` for actions&#10;- Loading indicators during network operations&#10;- Proper error and success message display&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;- Android Studio (latest version)&#10;- Android SDK 29+&#10;- Firebase project with Authentication enabled&#10;&#10;### Setup&#10;1. Clone the repository&#10;2. Open in Android Studio&#10;3. Ensure `google-services.json` is in the `app/` directory&#10;4. Build and run the project&#10;&#10;### Next Steps&#10;1. Remove placeholder &quot;Hello World&quot; content from MainActivity&#10;2. Implement authentication screens with Jetpack Compose&#10;3. Create ViewModels for each screen&#10;4. Integrate Firebase Authentication&#10;5. Add navigation between screens&#10;6. Implement form validation and error handling&#10;&#10;##  Development Checklist&#10;&#10;- [ ] Remove default MainActivity content&#10;- [ ] Create LoginScreen composable&#10;- [ ] Create SignUpScreen composable  &#10;- [ ] Create ForgotPasswordScreen composable&#10;- [ ] Implement LoginViewModel&#10;- [ ] Implement SignUpViewModel&#10;- [ ] Implement ForgotPasswordViewModel&#10;- [ ] Set up Navigation Compose&#10;- [ ] Integrate Firebase Auth for login&#10;- [ ] Integrate Firebase Auth for sign up&#10;- [ ] Integrate Firebase Auth for password reset&#10;- [ ] Add form validation&#10;- [ ] Add loading states and error handling&#10;- [ ] Add unit tests&#10;- [ ] Add UI tests&#10;&#10;##  Clean Code Practices&#10;&#10;- Follow MVVM architecture pattern&#10;- Use Compose best practices&#10;- Implement proper error handling&#10;- Write unit tests for ViewModels&#10;- Use dependency injection with Hilt&#10;- Follow Material Design guidelines&#10;&#10;##  References&#10;&#10;- [Jetpack Compose Documentation](https://developer.android.com/jetpack/compose)&#10;- [Firebase Auth for Android](https://firebase.google.com/docs/auth/android/start)&#10;- [Material Design 3](https://m3.material.io/)&#10;- [Android Architecture Guidelines](https://developer.android.com/topic/architecture)&#10;&#10;---&#10;&#10;**Status**:  Initial setup complete, ready for authentication implementation" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/MainActivity.kt" />
              <option name="originalContent" value="package com.valokafor.prontologin&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.valokafor.prontologin.ui.theme.ProntoLoginTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ProntoLoginTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    Greeting(&#10;                        name = &quot;Android&quot;,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    ProntoLoginTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.valokafor.prontologin&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.valokafor.prontologin.ui.navigation.AuthNavGraph&#10;import com.valokafor.prontologin.ui.theme.ProntoLoginTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ProntoLoginTheme {&#10;                val navController = rememberNavController()&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    AuthNavGraph(navController = navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/data/model/AuthModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/data/model/AuthModels.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.data.model&#10;&#10;data class LoginRequest(&#10;    val email: String,&#10;    val password: String&#10;)&#10;&#10;data class SignUpRequest(&#10;    val email: String,&#10;    val password: String&#10;)&#10;&#10;data class ForgotPasswordRequest(&#10;    val email: String&#10;)&#10;&#10;data class AuthResult(&#10;    val isSuccess: Boolean,&#10;    val message: String? = null,&#10;    val exception: Exception? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/data/repository/AuthRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/data/repository/AuthRepository.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.data.repository&#10;&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.FirebaseAuthException&#10;import com.valokafor.prontologin.data.model.AuthResult&#10;import kotlinx.coroutines.tasks.await&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class AuthRepository @Inject constructor(&#10;    private val firebaseAuth: FirebaseAuth&#10;) {&#10;    &#10;    suspend fun signIn(email: String, password: String): AuthResult {&#10;        return try {&#10;            firebaseAuth.signInWithEmailAndPassword(email, password).await()&#10;            AuthResult(isSuccess = true, message = &quot;Login successful&quot;)&#10;        } catch (e: FirebaseAuthException) {&#10;            AuthResult(&#10;                isSuccess = false,&#10;                message = getFirebaseErrorMessage(e),&#10;                exception = e&#10;            )&#10;        } catch (e: Exception) {&#10;            AuthResult(&#10;                isSuccess = false,&#10;                message = &quot;An unexpected error occurred&quot;,&#10;                exception = e&#10;            )&#10;        }&#10;    }&#10;    &#10;    suspend fun signUp(email: String, password: String): AuthResult {&#10;        return try {&#10;            firebaseAuth.createUserWithEmailAndPassword(email, password).await()&#10;            AuthResult(isSuccess = true, message = &quot;Account created successfully&quot;)&#10;        } catch (e: FirebaseAuthException) {&#10;            AuthResult(&#10;                isSuccess = false,&#10;                message = getFirebaseErrorMessage(e),&#10;                exception = e&#10;            )&#10;        } catch (e: Exception) {&#10;            AuthResult(&#10;                isSuccess = false,&#10;                message = &quot;An unexpected error occurred&quot;,&#10;                exception = e&#10;            )&#10;        }&#10;    }&#10;    &#10;    suspend fun resetPassword(email: String): AuthResult {&#10;        return try {&#10;            firebaseAuth.sendPasswordResetEmail(email).await()&#10;            AuthResult(isSuccess = true, message = &quot;Password reset email sent&quot;)&#10;        } catch (e: FirebaseAuthException) {&#10;            AuthResult(&#10;                isSuccess = false,&#10;                message = getFirebaseErrorMessage(e),&#10;                exception = e&#10;            )&#10;        } catch (e: Exception) {&#10;            AuthResult(&#10;                isSuccess = false,&#10;                message = &quot;An unexpected error occurred&quot;,&#10;                exception = e&#10;            )&#10;        }&#10;    }&#10;    &#10;    private fun getFirebaseErrorMessage(exception: FirebaseAuthException): String {&#10;        return when (exception.errorCode) {&#10;            &quot;ERROR_INVALID_EMAIL&quot; -&gt; &quot;Invalid email address&quot;&#10;            &quot;ERROR_WRONG_PASSWORD&quot; -&gt; &quot;Incorrect password&quot;&#10;            &quot;ERROR_USER_NOT_FOUND&quot; -&gt; &quot;No account found with this email&quot;&#10;            &quot;ERROR_USER_DISABLED&quot; -&gt; &quot;This account has been disabled&quot;&#10;            &quot;ERROR_TOO_MANY_REQUESTS&quot; -&gt; &quot;Too many failed attempts. Try again later&quot;&#10;            &quot;ERROR_EMAIL_ALREADY_IN_USE&quot; -&gt; &quot;An account with this email already exists&quot;&#10;            &quot;ERROR_WEAK_PASSWORD&quot; -&gt; &quot;Password is too weak&quot;&#10;            else -&gt; exception.message ?: &quot;Authentication failed&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/di/FirebaseModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/di/FirebaseModule.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.di&#10;&#10;import com.google.firebase.auth.FirebaseAuth&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object FirebaseModule {&#10;    &#10;    @Provides&#10;    @Singleton&#10;    fun provideFirebaseAuth(): FirebaseAuth {&#10;        return FirebaseAuth.getInstance()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/ProntoLoginApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/ProntoLoginApplication.kt" />
              <option name="originalContent" value="package com.valokafor.prontologin.ui&#10;&#10;import android.app.Application&#10;&#10;class ProntoLoginApplication: Application() {&#10;}" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui&#10;&#10;import android.app.Application&#10;import dagger.hilt.android.HiltAndroidApp&#10;&#10;@HiltAndroidApp&#10;class ProntoLoginApplication: Application() {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/components/AuthComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/components/AuthComponents.kt" />
              <option name="originalContent" value="package com.valokafor.prontologin.ui.components&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;&#10;@Composable&#10;fun AuthTextField(&#10;    value: String,&#10;    onValueChange: (String) -&gt; Unit,&#10;    label: String,&#10;    modifier: Modifier = Modifier,&#10;    isPassword: Boolean = false,&#10;    keyboardType: KeyboardType = KeyboardType.Text,&#10;    isError: Boolean = false,&#10;    supportingText: String? = null&#10;) {&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;&#10;    OutlinedTextField(&#10;        value = value,&#10;        onValueChange = onValueChange,&#10;        label = { Text(label) },&#10;        modifier = modifier.fillMaxWidth(),&#10;        singleLine = true,&#10;        visualTransformation = if (isPassword &amp;&amp; !passwordVisible) {&#10;            PasswordVisualTransformation()&#10;        } else {&#10;            VisualTransformation.None&#10;        },&#10;        keyboardOptions = KeyboardOptions(keyboardType = keyboardType),&#10;        trailingIcon = if (isPassword) {&#10;            {&#10;                IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                    Icon(&#10;                        imageVector = if (passwordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                        contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                    )&#10;                }&#10;            }&#10;        } else null,&#10;        isError = isError,&#10;        supportingText = supportingText?.let { { Text(it) } }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun AuthButton(&#10;    onClick: () -&gt; Unit,&#10;    text: String,&#10;    modifier: Modifier = Modifier,&#10;    enabled: Boolean = true,&#10;    isLoading: Boolean = false&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = modifier.fillMaxWidth(),&#10;        enabled = enabled &amp;&amp; !isLoading&#10;    ) {&#10;        if (isLoading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier.size(16.dp),&#10;                strokeWidth = 2.dp&#10;            )&#10;        } else {&#10;            Text(text)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LoadingIndicator() {&#10;    CircularProgressIndicator()&#10;}&#10;" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.components&#10;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Visibility&#10;import androidx.compose.material.icons.filled.VisibilityOff&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.input.VisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun AuthTextField(&#10;    value: String,&#10;    onValueChange: (String) -&gt; Unit,&#10;    label: String,&#10;    modifier: Modifier = Modifier,&#10;    isPassword: Boolean = false,&#10;    keyboardType: KeyboardType = KeyboardType.Text,&#10;    isError: Boolean = false,&#10;    supportingText: String? = null&#10;) {&#10;    var passwordVisible by remember { mutableStateOf(false) }&#10;&#10;    OutlinedTextField(&#10;        value = value,&#10;        onValueChange = onValueChange,&#10;        label = { Text(label) },&#10;        modifier = modifier.fillMaxWidth(),&#10;        singleLine = true,&#10;        visualTransformation = if (isPassword &amp;&amp; !passwordVisible) {&#10;            PasswordVisualTransformation()&#10;        } else {&#10;            VisualTransformation.None&#10;        },&#10;        keyboardOptions = KeyboardOptions(keyboardType = keyboardType),&#10;        trailingIcon = if (isPassword) {&#10;            {&#10;                IconButton(onClick = { passwordVisible = !passwordVisible }) {&#10;                    Icon(&#10;                        imageVector = if (passwordVisible) Icons.Default.Visibility else Icons.Default.VisibilityOff,&#10;                        contentDescription = if (passwordVisible) &quot;Hide password&quot; else &quot;Show password&quot;&#10;                    )&#10;                }&#10;            }&#10;        } else null,&#10;        isError = isError,&#10;        supportingText = supportingText?.let { { Text(it) } }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun AuthButton(&#10;    onClick: () -&gt; Unit,&#10;    text: String,&#10;    modifier: Modifier = Modifier,&#10;    enabled: Boolean = true,&#10;    isLoading: Boolean = false&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = modifier.fillMaxWidth(),&#10;        enabled = enabled &amp;&amp; !isLoading&#10;    ) {&#10;        if (isLoading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier.size(16.dp),&#10;                strokeWidth = 2.dp&#10;            )&#10;        } else {&#10;            Text(text)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LoadingIndicator() {&#10;    CircularProgressIndicator()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/navigation/AuthNavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/navigation/AuthNavGraph.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.valokafor.prontologin.ui.screens.ForgotPasswordScreen&#10;import com.valokafor.prontologin.ui.screens.LoginScreen&#10;import com.valokafor.prontologin.ui.screens.SignUpScreen&#10;&#10;object AuthDestinations {&#10;    const val LOGIN = &quot;login&quot;&#10;    const val SIGNUP = &quot;signup&quot;&#10;    const val FORGOT_PASSWORD = &quot;forgot_password&quot;&#10;}&#10;&#10;@Composable&#10;fun AuthNavGraph(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = AuthDestinations.LOGIN&#10;    ) {&#10;        composable(AuthDestinations.LOGIN) {&#10;            LoginScreen(navController = navController)&#10;        }&#10;        &#10;        composable(AuthDestinations.SIGNUP) {&#10;            SignUpScreen(navController = navController)&#10;        }&#10;        &#10;        composable(AuthDestinations.FORGOT_PASSWORD) {&#10;            ForgotPasswordScreen(navController = navController)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/screens/ForgotPasswordScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/screens/ForgotPasswordScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.valokafor.prontologin.ui.components.AuthButton&#10;import com.valokafor.prontologin.ui.components.AuthTextField&#10;import com.valokafor.prontologin.ui.state.ForgotPasswordUiState&#10;import com.valokafor.prontologin.ui.utils.FormValidation&#10;import com.valokafor.prontologin.ui.viewmodel.ForgotPasswordViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ForgotPasswordScreen(&#10;    navController: NavController,&#10;    viewModel: ForgotPasswordViewModel = hiltViewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val isFormValid = FormValidation.isForgotPasswordFormValid(email)&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Reset Password&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Forgot Password?&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium&#10;                )&#10;                &#10;                Text(&#10;                    text = &quot;Enter your email address and we'll send you a link to reset your password.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                &#10;                AuthTextField(&#10;                    value = email,&#10;                    onValueChange = { email = it },&#10;                    label = &quot;Email&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    isError = email.isNotBlank() &amp;&amp; !FormValidation.isValidEmail(email),&#10;                    supportingText = if (email.isNotBlank() &amp;&amp; !FormValidation.isValidEmail(email)) {&#10;                        &quot;Please enter a valid email&quot;&#10;                    } else null&#10;                )&#10;                &#10;                when (uiState) {&#10;                    is ForgotPasswordUiState.Error -&gt; {&#10;                        Text(&#10;                            text = uiState.message,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                    is ForgotPasswordUiState.Success -&gt; {&#10;                        Text(&#10;                            text = uiState.message,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                    else -&gt; {}&#10;                }&#10;                &#10;                AuthButton(&#10;                    onClick = { viewModel.resetPassword(email) },&#10;                    text = &quot;Send Reset Link&quot;,&#10;                    enabled = isFormValid,&#10;                    isLoading = uiState is ForgotPasswordUiState.Loading&#10;                )&#10;                &#10;                TextButton(&#10;                    onClick = { navController.navigateUp() }&#10;                ) {&#10;                    Text(&quot;Back to Login&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/screens/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/screens/LoginScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.valokafor.prontologin.ui.components.AuthButton&#10;import com.valokafor.prontologin.ui.components.AuthTextField&#10;import com.valokafor.prontologin.ui.state.LoginUiState&#10;import com.valokafor.prontologin.ui.utils.FormValidation&#10;import com.valokafor.prontologin.ui.viewmodel.LoginViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(&#10;    navController: NavController,&#10;    viewModel: LoginViewModel = hiltViewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val isFormValid = FormValidation.isLoginFormValid(email, password)&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Login&quot;) }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Welcome Back&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium&#10;                )&#10;                &#10;                AuthTextField(&#10;                    value = email,&#10;                    onValueChange = { email = it },&#10;                    label = &quot;Email&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    isError = email.isNotBlank() &amp;&amp; !FormValidation.isValidEmail(email),&#10;                    supportingText = if (email.isNotBlank() &amp;&amp; !FormValidation.isValidEmail(email)) {&#10;                        &quot;Please enter a valid email&quot;&#10;                    } else null&#10;                )&#10;                &#10;                AuthTextField(&#10;                    value = password,&#10;                    onValueChange = { password = it },&#10;                    label = &quot;Password&quot;,&#10;                    isPassword = true,&#10;                    isError = password.isNotBlank() &amp;&amp; !FormValidation.isValidPassword(password),&#10;                    supportingText = if (password.isNotBlank() &amp;&amp; !FormValidation.isValidPassword(password)) {&#10;                        &quot;Password must be at least 6 characters&quot;&#10;                    } else null&#10;                )&#10;                &#10;                when (uiState) {&#10;                    is LoginUiState.Error -&gt; {&#10;                        Text(&#10;                            text = uiState.message,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                    is LoginUiState.Success -&gt; {&#10;                        Text(&#10;                            text = &quot;Login successful!&quot;,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                    else -&gt; {}&#10;                }&#10;                &#10;                AuthButton(&#10;                    onClick = { viewModel.login(email, password) },&#10;                    text = &quot;Sign In&quot;,&#10;                    enabled = isFormValid,&#10;                    isLoading = uiState is LoginUiState.Loading&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    TextButton(&#10;                        onClick = { navController.navigate(&quot;signup&quot;) }&#10;                    ) {&#10;                        Text(&quot;Sign Up&quot;)&#10;                    }&#10;                    &#10;                    TextButton(&#10;                        onClick = { navController.navigate(&quot;forgot_password&quot;) }&#10;                    ) {&#10;                        Text(&quot;Forgot Password?&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/screens/SignUpScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/screens/SignUpScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.valokafor.prontologin.ui.components.AuthButton&#10;import com.valokafor.prontologin.ui.components.AuthTextField&#10;import com.valokafor.prontologin.ui.state.SignUpUiState&#10;import com.valokafor.prontologin.ui.utils.FormValidation&#10;import com.valokafor.prontologin.ui.viewmodel.SignUpViewModel&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.runtime.getValue&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SignUpScreen(&#10;    navController: NavController,&#10;    viewModel: SignUpViewModel = hiltViewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var confirmPassword by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val isFormValid = FormValidation.isSignUpFormValid(email, password, confirmPassword)&#10;    &#10;    // Navigate back to login on successful signup&#10;    LaunchedEffect(uiState) {&#10;        if (uiState is SignUpUiState.Success) {&#10;            navController.navigate(&quot;login&quot;) {&#10;                popUpTo(&quot;login&quot;) { inclusive = true }&#10;            }&#10;        }&#10;    }&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Sign Up&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Create Account&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium&#10;                )&#10;                &#10;                AuthTextField(&#10;                    value = email,&#10;                    onValueChange = { email = it },&#10;                    label = &quot;Email&quot;,&#10;                    keyboardType = KeyboardType.Email,&#10;                    isError = email.isNotBlank() &amp;&amp; !FormValidation.isValidEmail(email),&#10;                    supportingText = if (email.isNotBlank() &amp;&amp; !FormValidation.isValidEmail(email)) {&#10;                        &quot;Please enter a valid email&quot;&#10;                    } else null&#10;                )&#10;                &#10;                AuthTextField(&#10;                    value = password,&#10;                    onValueChange = { password = it },&#10;                    label = &quot;Password&quot;,&#10;                    isPassword = true,&#10;                    isError = password.isNotBlank() &amp;&amp; !FormValidation.isValidPassword(password),&#10;                    supportingText = if (password.isNotBlank() &amp;&amp; !FormValidation.isValidPassword(password)) {&#10;                        &quot;Password must be at least 6 characters&quot;&#10;                    } else null&#10;                )&#10;                &#10;                AuthTextField(&#10;                    value = confirmPassword,&#10;                    onValueChange = { confirmPassword = it },&#10;                    label = &quot;Confirm Password&quot;,&#10;                    isPassword = true,&#10;                    isError = confirmPassword.isNotBlank() &amp;&amp; !FormValidation.doPasswordsMatch(password, confirmPassword),&#10;                    supportingText = if (confirmPassword.isNotBlank() &amp;&amp; !FormValidation.doPasswordsMatch(password, confirmPassword)) {&#10;                        &quot;Passwords do not match&quot;&#10;                    } else null&#10;                )&#10;                &#10;                when (uiState) {&#10;                    is SignUpUiState.Error -&gt; {&#10;                        Text(&#10;                            text = uiState.message,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                    is SignUpUiState.Success -&gt; {&#10;                        Text(&#10;                            text = uiState.message,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                    else -&gt; {}&#10;                }&#10;                &#10;                AuthButton(&#10;                    onClick = { viewModel.signUp(email, password) },&#10;                    text = &quot;Create Account&quot;,&#10;                    enabled = isFormValid,&#10;                    isLoading = uiState is SignUpUiState.Loading&#10;                )&#10;                &#10;                TextButton(&#10;                    onClick = { navController.navigateUp() }&#10;                ) {&#10;                    Text(&quot;Already have an account? Sign In&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/state/AuthUiState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/state/AuthUiState.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.state&#10;&#10;sealed class AuthUiState {&#10;    object Idle : AuthUiState()&#10;    object Loading : AuthUiState()&#10;    data class Success(val message: String) : AuthUiState()&#10;    data class Error(val message: String) : AuthUiState()&#10;}&#10;&#10;sealed class LoginUiState {&#10;    object Idle : LoginUiState()&#10;    object Loading : LoginUiState()&#10;    object Success : LoginUiState()&#10;    data class Error(val message: String) : LoginUiState()&#10;}&#10;&#10;sealed class SignUpUiState {&#10;    object Idle : SignUpUiState()&#10;    object Loading : SignUpUiState()&#10;    data class Success(val message: String) : SignUpUiState()&#10;    data class Error(val message: String) : SignUpUiState()&#10;}&#10;&#10;sealed class ForgotPasswordUiState {&#10;    object Idle : ForgotPasswordUiState()&#10;    object Loading : ForgotPasswordUiState()&#10;    data class Success(val message: String) : ForgotPasswordUiState()&#10;    data class Error(val message: String) : ForgotPasswordUiState()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/utils/FormValidation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/utils/FormValidation.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.utils&#10;&#10;import android.util.Patterns&#10;&#10;object FormValidation {&#10;    &#10;    fun isValidEmail(email: String): Boolean {&#10;        return email.isNotBlank() &amp;&amp; Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    }&#10;    &#10;    fun isValidPassword(password: String): Boolean {&#10;        return password.isNotBlank() &amp;&amp; password.length &gt;= 6&#10;    }&#10;    &#10;    fun doPasswordsMatch(password: String, confirmPassword: String): Boolean {&#10;        return password == confirmPassword &amp;&amp; password.isNotBlank()&#10;    }&#10;    &#10;    fun isLoginFormValid(email: String, password: String): Boolean {&#10;        return isValidEmail(email) &amp;&amp; isValidPassword(password)&#10;    }&#10;    &#10;    fun isSignUpFormValid(email: String, password: String, confirmPassword: String): Boolean {&#10;        return isValidEmail(email) &amp;&amp; isValidPassword(password) &amp;&amp; doPasswordsMatch(password, confirmPassword)&#10;    }&#10;    &#10;    fun isForgotPasswordFormValid(email: String): Boolean {&#10;        return isValidEmail(email)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/viewmodel/ForgotPasswordViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/viewmodel/ForgotPasswordViewModel.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.valokafor.prontologin.data.repository.AuthRepository&#10;import com.valokafor.prontologin.ui.state.ForgotPasswordUiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class ForgotPasswordViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;    &#10;    private val _uiState = MutableStateFlow&lt;ForgotPasswordUiState&gt;(ForgotPasswordUiState.Idle)&#10;    val uiState: StateFlow&lt;ForgotPasswordUiState&gt; = _uiState.asStateFlow()&#10;    &#10;    fun resetPassword(email: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = ForgotPasswordUiState.Loading&#10;            &#10;            val result = authRepository.resetPassword(email)&#10;            &#10;            _uiState.value = if (result.isSuccess) {&#10;                ForgotPasswordUiState.Success(result.message ?: &quot;Password reset email sent&quot;)&#10;            } else {&#10;                ForgotPasswordUiState.Error(result.message ?: &quot;Failed to send reset email&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    fun clearState() {&#10;        _uiState.value = ForgotPasswordUiState.Idle&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/viewmodel/LoginViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/viewmodel/LoginViewModel.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.valokafor.prontologin.data.repository.AuthRepository&#10;import com.valokafor.prontologin.ui.state.LoginUiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class LoginViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;    &#10;    private val _uiState = MutableStateFlow&lt;LoginUiState&gt;(LoginUiState.Idle)&#10;    val uiState: StateFlow&lt;LoginUiState&gt; = _uiState.asStateFlow()&#10;    &#10;    fun login(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = LoginUiState.Loading&#10;            &#10;            val result = authRepository.signIn(email, password)&#10;            &#10;            _uiState.value = if (result.isSuccess) {&#10;                LoginUiState.Success&#10;            } else {&#10;                LoginUiState.Error(result.message ?: &quot;Login failed&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    fun clearState() {&#10;        _uiState.value = LoginUiState.Idle&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/viewmodel/SignUpViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/valokafor/prontologin/ui/viewmodel/SignUpViewModel.kt" />
              <option name="updatedContent" value="package com.valokafor.prontologin.ui.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.valokafor.prontologin.data.repository.AuthRepository&#10;import com.valokafor.prontologin.ui.state.SignUpUiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class SignUpViewModel @Inject constructor(&#10;    private val authRepository: AuthRepository&#10;) : ViewModel() {&#10;    &#10;    private val _uiState = MutableStateFlow&lt;SignUpUiState&gt;(SignUpUiState.Idle)&#10;    val uiState: StateFlow&lt;SignUpUiState&gt; = _uiState.asStateFlow()&#10;    &#10;    fun signUp(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            _uiState.value = SignUpUiState.Loading&#10;            &#10;            val result = authRepository.signUp(email, password)&#10;            &#10;            _uiState.value = if (result.isSuccess) {&#10;                SignUpUiState.Success(result.message ?: &quot;Account created successfully&quot;)&#10;            } else {&#10;                SignUpUiState.Error(result.message ?: &quot;Sign up failed&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    fun clearState() {&#10;        _uiState.value = SignUpUiState.Idle&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/plans/implementation_checklist.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/plans/implementation_checklist.md" />
              <option name="updatedContent" value="# Pronto Task Implementation Checklist&#10;&#10;##  Implementation Progress&#10;&#10;### Phase 1: Project Setup &amp; Clean Up&#10;- [x] Remove &quot;Hello World&quot; content from MainActivity ✅&#10;- [ ] Configure Hilt Application class&#10;- [ ] Add Firebase Auth initialization&#10;- [ ] Set up basic navigation structure&#10;&#10;### Phase 2: UI State &amp; Data Models&#10;- [ ] Create AuthUiState sealed classes&#10;- [ ] Create form validation utilities&#10;- [ ] Create authentication data models&#10;- [ ] Set up state hoisting patterns&#10;&#10;### Phase 3: Screen Architecture&#10;- [ ] Create LoginScreen composable&#10;- [ ] Create SignUpScreen composable&#10;- [ ] Create ForgotPasswordScreen composable&#10;- [ ] Create reusable UI components&#10;- [ ] Implement form validation for all screens&#10;&#10;### Phase 4: ViewModel Implementation&#10;- [ ] Create LoginViewModel with Firebase integration&#10;- [ ] Create SignUpViewModel with account creation&#10;- [ ] Create ForgotPasswordViewModel with password reset&#10;- [ ] Add proper error handling and state management&#10;&#10;### Phase 5: Firebase Integration&#10;- [ ] Set up AuthRepository&#10;- [ ] Implement sign in functionality&#10;- [ ] Implement sign up functionality&#10;- [ ] Implement forgot password functionality&#10;- [ ] Add Firebase error handling&#10;&#10;### Phase 6: Navigation Setup&#10;- [ ] Create AuthNavGraph&#10;- [ ] Implement screen transitions&#10;- [ ] Handle navigation after successful operations&#10;- [ ] Add proper back stack management&#10;&#10;### Phase 7: Final Integration &amp; Testing&#10;- [ ] Connect ViewModels to screens&#10;- [ ] Test all authentication flows&#10;- [ ] Verify form validation works&#10;- [ ] Ensure app builds successfully&#10;- [ ] Test navigation between screens&#10;&#10;##  Current Status&#10;**Phase**: Starting Phase 1&#10;**Next Action**: Configure Hilt and remove MainActivity placeholder&#10;&#10;##  Notes&#10;- Firebase is already configured (google-services.json present)&#10;- All dependencies are already in build.gradle.kts&#10;- Need to ensure app builds at each major milestone" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/plans/pronto_task_implementation_plan.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/plans/pronto_task_implementation_plan.md" />
              <option name="updatedContent" value="# Pronto Task Login Implementation Plan&#10;&#10;##  Overview&#10;This plan outlines the complete implementation of the Android login screen with Firebase Authentication as specified in `docs/pronto_task_login_prompt.md`.&#10;&#10;---&#10;&#10;##  Project Goals&#10;- Replace &quot;Hello World&quot; placeholder with complete authentication flow&#10;- Implement Login, Sign Up, and Forgot Password screens&#10;- Use Jetpack Compose with Material Design 3&#10;- Integrate Firebase Authentication&#10;- Follow MVVM architecture with proper state management&#10;&#10;---&#10;&#10;##  Phase 1: Project Setup &amp; Clean Up&#10;### Tasks:&#10;- [x] Remove &quot;Hello World&quot; content from MainActivity&#10;- [x] Verify Firebase configuration and dependencies&#10;- [x] Set up navigation structure&#10;- [ ] Configure Hilt for dependency injection&#10;- [ ] Add Firebase Auth initialization&#10;&#10;### Deliverables:&#10;- Clean MainActivity with proper navigation setup&#10;- Working project build without placeholder content&#10;&#10;---&#10;&#10;##  Phase 2: UI State &amp; Data Models&#10;### Tasks:&#10;- [ ] Create sealed UI state classes for each screen&#10;- [ ] Define form validation utilities&#10;- [ ] Create data models for authentication requests&#10;- [ ] Set up state hoisting patterns&#10;&#10;### File Structure:&#10;```&#10;ui/&#10;├── state/&#10;│   ├── AuthUiState.kt          # Sealed classes for UI states&#10;│   └── FormValidation.kt       # Validation utilities&#10;└── model/&#10;    └── AuthModels.kt           # Data models&#10;```&#10;&#10;### Code Artifacts:&#10;```kotlin&#10;sealed class AuthUiState {&#10;    object Idle : AuthUiState()&#10;    object Loading : AuthUiState()&#10;    data class Success(val message: String) : AuthUiState()&#10;    data class Error(val message: String) : AuthUiState()&#10;}&#10;```&#10;&#10;---&#10;&#10;## ️ Phase 3: Screen Architecture&#10;### Tasks:&#10;- [ ] Create LoginScreen composable with Material3 components&#10;- [ ] Create SignUpScreen composable&#10;- [ ] Create ForgotPasswordScreen composable&#10;- [ ] Implement form validation for each screen&#10;- [ ] Add loading indicators and error displays&#10;&#10;### File Structure:&#10;```&#10;ui/&#10;├── screens/&#10;│   ├── LoginScreen.kt&#10;│   ├── SignUpScreen.kt&#10;│   └── ForgotPasswordScreen.kt&#10;└── components/&#10;    ├── AuthTextField.kt        # Reusable input field&#10;    ├── AuthButton.kt          # Reusable button&#10;    └── LoadingIndicator.kt    # Loading state component&#10;```&#10;&#10;### UI Components Checklist:&#10;- [ ] `OutlinedTextField` for email input with validation&#10;- [ ] `OutlinedTextField` for password input with visibility toggle&#10;- [ ] `Button` for primary actions (Sign In, Sign Up, Send Reset)&#10;- [ ] `TextButton` for secondary actions (navigation links)&#10;- [ ] Loading indicators during network requests&#10;- [ ] Error message displays with proper styling&#10;- [ ] Success message displays&#10;&#10;---&#10;&#10;##  Phase 4: ViewModel Implementation&#10;### Tasks:&#10;- [ ] Create LoginViewModel with Firebase Auth integration&#10;- [ ] Create SignUpViewModel with account creation logic&#10;- [ ] Create ForgotPasswordViewModel with password reset&#10;- [ ] Implement proper error handling and state management&#10;- [ ] Add form validation logic&#10;&#10;### File Structure:&#10;```&#10;ui/&#10;└── viewmodel/&#10;    ├── LoginViewModel.kt&#10;    ├── SignUpViewModel.kt&#10;    └── ForgotPasswordViewModel.kt&#10;```&#10;&#10;### ViewModel Features:&#10;- [ ] Email/password validation&#10;- [ ] Firebase Auth integration&#10;- [ ] Loading state management&#10;- [ ] Error handling with user-friendly messages&#10;- [ ] Success state handling&#10;&#10;---&#10;&#10;##  Phase 5: Firebase Integration&#10;### Tasks:&#10;- [ ] Set up Firebase Auth repository&#10;- [ ] Implement sign in with email/password&#10;- [ ] Implement account creation&#10;- [ ] Implement password reset functionality&#10;- [ ] Add proper error handling for Firebase exceptions&#10;&#10;### File Structure:&#10;```&#10;data/&#10;├── repository/&#10;│   └── AuthRepository.kt&#10;└── source/&#10;    └── FirebaseAuthDataSource.kt&#10;```&#10;&#10;### Firebase Methods:&#10;- `FirebaseAuth.signInWithEmailAndPassword()`&#10;- `FirebaseAuth.createUserWithEmailAndPassword()`&#10;- `FirebaseAuth.sendPasswordResetEmail()`&#10;&#10;---&#10;&#10;##  Phase 6: Navigation Setup&#10;### Tasks:&#10;- [ ] Create navigation graph for auth screens&#10;- [ ] Implement screen transitions&#10;- [ ] Handle navigation after successful operations&#10;- [ ] Add proper back stack management&#10;&#10;### File Structure:&#10;```&#10;ui/&#10;└── navigation/&#10;    ├── AuthNavGraph.kt&#10;    └── AuthDestinations.kt&#10;```&#10;&#10;### Navigation Flow:&#10;```&#10;LoginScreen &#10;├── → SignUpScreen → (success) → LoginScreen&#10;└── → ForgotPasswordScreen → (success) → LoginScreen&#10;```&#10;&#10;---&#10;&#10;## ✅ Phase 7: Validation &amp; Error Handling&#10;### Tasks:&#10;- [ ] Email format validation using regex&#10;- [ ] Password strength validation&#10;- [ ] Form state validation (disable buttons when invalid)&#10;- [ ] Firebase error message mapping&#10;- [ ] User-friendly error displays&#10;&#10;### Validation Rules:&#10;- Email: Valid format using `Patterns.EMAIL_ADDRESS`&#10;- Password: Non-empty, Firebase minimum requirements&#10;- Confirm Password: Matches original password&#10;- Form: All fields valid before enabling submit buttons&#10;&#10;---&#10;&#10;##  Phase 8: Testing &amp; Polish&#10;### Tasks:&#10;- [ ] Unit tests for ViewModels&#10;- [ ] UI tests for form validation&#10;- [ ] Integration tests for Firebase auth&#10;- [ ] Polish UI animations and transitions&#10;- [ ] Accessibility improvements&#10;&#10;### Test Structure:&#10;```&#10;test/&#10;├── viewmodel/&#10;│   ├── LoginViewModelTest.kt&#10;│   ├── SignUpViewModelTest.kt&#10;│   └── ForgotPasswordViewModelTest.kt&#10;└── ui/&#10;    └── AuthScreensTest.kt&#10;```&#10;&#10;---&#10;&#10;##  Implementation Checklist&#10;&#10;### Core Features:&#10;- [ ] Login with email/password&#10;- [ ] Sign up with email/password&#10;- [ ] Forgot password functionality&#10;- [ ] Form validation&#10;- [ ] Loading states&#10;- [ ] Error handling&#10;- [ ] Success feedback&#10;- [ ] Navigation between screens&#10;&#10;### Technical Requirements:&#10;- [ ] Jetpack Compose UI&#10;- [ ] Material Design 3 components&#10;- [ ] MVVM architecture&#10;- [ ] Firebase Authentication&#10;- [ ] State hoisting&#10;- [ ] Sealed UI state classes&#10;- [ ] ViewModel-based state management&#10;&#10;### UI/UX Requirements:&#10;- [ ] Proper loading indicators&#10;- [ ] Error message displays&#10;- [ ] Form validation feedback&#10;- [ ] Disabled buttons for invalid forms&#10;- [ ] Smooth navigation transitions&#10;- [ ] Accessible design&#10;&#10;---&#10;&#10;##  Delivery Timeline&#10;&#10;| Phase | Duration | Deliverable |&#10;|-------|----------|-------------|&#10;| 1 | 1 day | Clean project setup |&#10;| 2 | 1 day | UI state and data models |&#10;| 3 | 2 days | Complete screen UI |&#10;| 4 | 2 days | ViewModel implementation |&#10;| 5 | 1 day | Firebase integration |&#10;| 6 | 1 day | Navigation setup |&#10;| 7 | 1 day | Validation &amp; error handling |&#10;| 8 | 1 day | Testing &amp; polish |&#10;&#10;**Total Estimated Time: 10 days**&#10;&#10;---&#10;&#10;##  Technical References&#10;&#10;- [Jetpack Compose Documentation](https://developer.android.com/jetpack/compose)&#10;- [Firebase Auth for Android](https://firebase.google.com/docs/auth/android/start)&#10;- [Material Design 3](https://m3.material.io/)&#10;- [Android Architecture Guidelines](https://developer.android.com/topic/architecture)&#10;- [State Hoisting in Compose](https://developer.android.com/jetpack/compose/state)&#10;&#10;---&#10;&#10;##  Success Criteria&#10;&#10;The implementation will be considered complete when:&#10;1. ✅ All placeholder content is removed&#10;2. ✅ Login, sign up, and forgot password screens are functional&#10;3. ✅ Firebase Auth integration works correctly&#10;4. ✅ Form validation prevents invalid submissions&#10;5. ✅ Loading states and error handling work properly&#10;6. ✅ Navigation between screens is smooth&#10;7. ✅ UI follows Material Design 3 guidelines&#10;8. ✅ Code follows MVVM architecture patterns&#10;&#10;---&#10;&#10;**Status**: Ready for implementation  &#10;**Next Step**: Begin Phase 1 - Project Setup &amp; Clean Up" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>